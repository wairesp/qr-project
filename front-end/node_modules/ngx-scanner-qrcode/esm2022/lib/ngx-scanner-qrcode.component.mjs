import { Component, EventEmitter, ViewChild, ViewEncapsulation } from '@angular/core';
import { AsyncSubject, BehaviorSubject } from 'rxjs';
import { CANVAS_STYLES_LAYER, CANVAS_STYLES_TEXT, CONFIG_DEFAULT, MEDIA_STREAM_DEFAULT } from './ngx-scanner-qrcode.default';
import { AS_COMPLETE, BLOB_TO_FILE, CANVAS_TO_BLOB, DRAW_RESULT_APPEND_CHILD, FILES_TO_SCAN, OVERRIDES, PLAY_AUDIO, REMOVE_RESULT_PANEL, RESET_CANVAS, UPDATE_WIDTH_HEIGHT_VIDEO, VIBRATE, WASM_READY } from './ngx-scanner-qrcode.helper';
import { LOAD_WASM } from './ngx-scanner-qrcode.loader';
import * as i0 from "@angular/core";
class NgxScannerQrcodeComponent {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        /**
         * EventEmitter
         */
        this.event = new EventEmitter();
        /**
         * Input
         */
        this.src = CONFIG_DEFAULT.src;
        this.fps = CONFIG_DEFAULT.fps;
        this.vibrate = CONFIG_DEFAULT.vibrate;
        this.decode = CONFIG_DEFAULT.decode;
        this.isBeep = CONFIG_DEFAULT.isBeep;
        this.config = CONFIG_DEFAULT;
        this.constraints = CONFIG_DEFAULT.constraints;
        this.canvasStyles = [CANVAS_STYLES_LAYER, CANVAS_STYLES_TEXT];
        /**
         * Export
        */
        this.isStart = false;
        this.isPause = false;
        this.isLoading = false;
        this.isTorch = false;
        this.data = new BehaviorSubject([]);
        this.devices = new BehaviorSubject([]);
        this.deviceIndexActive = 0;
        this.dataForResize = [];
        this.ready = new AsyncSubject();
        this.STATUS = {
            startON: () => this.isStart = true,
            pauseON: () => this.isPause = true,
            loadingON: () => this.isLoading = true,
            startOFF: () => this.isStart = false,
            pauseOFF: () => this.isPause = false,
            loadingOFF: () => this.isLoading = false,
            torchOFF: () => this.isTorch = false,
        };
    }
    ngOnInit() {
        this.overrideConfig();
        LOAD_WASM(this.ready, this.renderer).subscribe(() => {
            if (this.src) {
                this.loadImage(this.src);
            }
            this.resize();
        });
    }
    /**
     * start
     * @param playDeviceCustom
     * @returns
     */
    start(playDeviceCustom) {
        const as = new AsyncSubject();
        if (this.isStart) {
            // Reject
            AS_COMPLETE(as, false);
        }
        else {
            // fix safari
            this.safariWebRTC(as, playDeviceCustom);
        }
        return as;
    }
    /**
     * stop
     * @returns
     */
    stop() {
        this.STATUS.pauseOFF();
        this.STATUS.startOFF();
        this.STATUS.torchOFF();
        this.STATUS.loadingOFF();
        const as = new AsyncSubject();
        try {
            clearTimeout(this.rAF_ID);
            this.video.nativeElement.srcObject.getTracks().forEach((track) => {
                track.stop();
                AS_COMPLETE(as, true);
            });
            this.dataForResize = [];
            RESET_CANVAS(this.canvas.nativeElement);
            REMOVE_RESULT_PANEL(this.resultsPanel.nativeElement);
        }
        catch (error) {
            AS_COMPLETE(as, false, error);
        }
        return as;
    }
    /**
     * play
     * @returns
     */
    play() {
        const as = new AsyncSubject();
        if (this.isPause) {
            this.video.nativeElement.play();
            this.STATUS.pauseOFF();
            this.requestAnimationFrame();
            AS_COMPLETE(as, true);
        }
        else {
            AS_COMPLETE(as, false);
        }
        return as;
    }
    /**
     * pause
     * @returns
     */
    pause() {
        const as = new AsyncSubject();
        if (this.isStart) {
            clearTimeout(this.rAF_ID);
            this.video.nativeElement.pause();
            this.STATUS.pauseON();
            AS_COMPLETE(as, true);
        }
        else {
            AS_COMPLETE(as, false);
        }
        return as;
    }
    /**
     * playDevice
     * @param deviceId
     * @param as
     * @returns
     */
    playDevice(deviceId, as = new AsyncSubject()) {
        const constraints = this.getConstraints();
        const existDeviceId = (this.isStart && constraints) ? constraints.deviceId !== deviceId : true;
        switch (true) {
            case deviceId === 'null' || deviceId === 'undefined' || !deviceId:
                stop();
                this.stop();
                AS_COMPLETE(as, false);
                break;
            case deviceId && existDeviceId:
                stop();
                this.stop();
                // Loading on
                this.STATUS.loadingON();
                this.deviceIndexActive = this.devices.value.findIndex((f) => f.deviceId === deviceId);
                const constraints = { ...this.constraints, audio: false, video: { deviceId: deviceId, ...this.constraints.video } };
                // MediaStream
                navigator.mediaDevices.getUserMedia(constraints).then((stream) => {
                    this.video.nativeElement.srcObject = stream;
                    this.video.nativeElement.onloadedmetadata = () => {
                        this.video.nativeElement.play();
                        this.requestAnimationFrame();
                        AS_COMPLETE(as, true);
                        this.STATUS.startON();
                        this.STATUS.loadingOFF();
                    };
                }).catch((error) => {
                    this.eventEmit(false);
                    AS_COMPLETE(as, false, error);
                    this.STATUS.startOFF();
                    this.STATUS.loadingOFF();
                });
                break;
            default:
                AS_COMPLETE(as, false);
                this.STATUS.loadingOFF();
                break;
        }
        return as;
    }
    /**
     * loadImage
     * @param src
     * @returns
     */
    loadImage(src) {
        const as = new AsyncSubject();
        // Loading on
        this.STATUS.startOFF();
        this.STATUS.loadingON();
        // Set the src of this Image object.
        const image = new Image();
        // Setting cross origin value to anonymous
        image.setAttribute('crossOrigin', 'anonymous');
        // When our image has loaded.
        image.onload = () => {
            WASM_READY() && this.drawImage(image, (flag) => {
                AS_COMPLETE(as, flag);
                this.STATUS.startOFF();
                this.STATUS.loadingOFF();
            });
        };
        // Set src
        image.src = src;
        return as;
    }
    /**
     * torcher
     * @returns
     */
    torcher() {
        const as = this.applyConstraints({ advanced: [{ torch: this.isTorch }] });
        as.subscribe(() => false, () => this.isTorch = !this.isTorch);
        return as;
    }
    /**
     * applyConstraints
     * @param constraints
     * @param deviceIndex
     * @returns
     */
    applyConstraints(constraints, deviceIndex = 0) {
        const as = new AsyncSubject();
        if (this.isStart) {
            const stream = this.video.nativeElement.srcObject;
            if (deviceIndex !== null || deviceIndex !== undefined || !Number.isNaN(deviceIndex)) {
                const videoTrack = stream.getVideoTracks()[deviceIndex];
                const imageCapture = new window.ImageCapture(videoTrack);
                imageCapture.getPhotoCapabilities().then(async () => {
                    await videoTrack.applyConstraints(constraints);
                    UPDATE_WIDTH_HEIGHT_VIDEO(this.video.nativeElement, this.canvas.nativeElement);
                    AS_COMPLETE(as, true);
                }).catch((error) => {
                    switch (error?.name) {
                        case 'NotFoundError':
                        case 'DevicesNotFoundError':
                            AS_COMPLETE(as, false, 'Required track is missing');
                            break;
                        case 'NotReadableError':
                        case 'TrackStartError':
                            AS_COMPLETE(as, false, 'Webcam or mic are already in use');
                            break;
                        case 'OverconstrainedError':
                        case 'ConstraintNotSatisfiedError':
                            AS_COMPLETE(as, false, 'Constraints can not be satisfied by avb. devices');
                            break;
                        case 'NotAllowedError':
                        case 'PermissionDeniedError':
                            AS_COMPLETE(as, false, 'Permission denied in browser');
                            break;
                        case 'TypeError':
                            AS_COMPLETE(as, false, 'Empty constraints object');
                            break;
                        default:
                            AS_COMPLETE(as, false, error);
                            break;
                    }
                });
            }
            else {
                AS_COMPLETE(as, false, 'Please check again deviceIndex');
            }
        }
        else {
            AS_COMPLETE(as, false, 'Please start the scanner');
        }
        return as;
    }
    ;
    /**
     * getConstraints
     * @param deviceIndex
     * @returns
     */
    getConstraints(deviceIndex = 0) {
        const stream = this.video.nativeElement.srcObject;
        const videoTrack = stream?.getVideoTracks()[deviceIndex];
        return videoTrack?.getConstraints();
    }
    /**
     * download
     * @param fileName
     * @param quality
     * @param type
     * @returns
     */
    download(fileName = `ngx_scanner_qrcode_${Date.now()}.png`, quality, type) {
        const as = new AsyncSubject();
        (async () => {
            const blob = await CANVAS_TO_BLOB(this.canvas.nativeElement);
            const file = BLOB_TO_FILE(blob, fileName);
            FILES_TO_SCAN([file], this.config, quality, type, as).subscribe((res) => {
                res.forEach((item) => {
                    if (item?.data?.length) {
                        const link = document.createElement('a');
                        link.href = item.url;
                        link.download = item.name;
                        link.click();
                        link.remove();
                    }
                });
            });
        })();
        return as;
    }
    /**
     * resize
     */
    resize() {
        window.addEventListener("resize", () => {
            DRAW_RESULT_APPEND_CHILD(this.dataForResize, this.canvas.nativeElement, this.resultsPanel.nativeElement, this.canvasStyles);
            UPDATE_WIDTH_HEIGHT_VIDEO(this.video.nativeElement, this.canvas.nativeElement);
        });
    }
    /**
     * overrideConfig
     */
    overrideConfig() {
        if ('src' in this.config)
            this.src = this.config.src;
        if ('fps' in this.config)
            this.fps = this.config.fps;
        if ('vibrate' in this.config)
            this.vibrate = this.config.vibrate;
        if ('decode' in this.config)
            this.decode = this.config.decode;
        if ('isBeep' in this.config)
            this.isBeep = this.config.isBeep;
        if ('constraints' in this.config)
            this.constraints = OVERRIDES('constraints', this.config, MEDIA_STREAM_DEFAULT);
        if ('canvasStyles' in this.config && this.config?.canvasStyles?.length === 2)
            this.canvasStyles = this.config.canvasStyles;
    }
    /**
     * safariWebRTC
     * Fix issue on safari
     * https://webrtchacks.com/guide-to-safari-webrtc
     * @param as
     * @param playDeviceCustom
     */
    safariWebRTC(as, playDeviceCustom) {
        // Loading on
        this.STATUS.startOFF();
        this.STATUS.loadingON();
        navigator.mediaDevices.getUserMedia(this.constraints).then((stream) => {
            stream.getTracks().forEach(track => track.stop());
            this.loadAllDevices(as, playDeviceCustom);
        }).catch((error) => {
            AS_COMPLETE(as, false, error);
            this.STATUS.startOFF();
            this.STATUS.loadingOFF();
        });
    }
    /**
     * loadAllDevices
     * @param as
     * @param playDeviceCustom
     */
    loadAllDevices(as, playDeviceCustom) {
        navigator.mediaDevices.enumerateDevices().then(devices => {
            let cameraDevices = devices.filter(f => f.kind == 'videoinput');
            this.devices.next(cameraDevices);
            if (cameraDevices?.length > 0) {
                AS_COMPLETE(as, cameraDevices);
                playDeviceCustom ? playDeviceCustom(cameraDevices) : this.playDevice(cameraDevices[0].deviceId);
            }
            else {
                AS_COMPLETE(as, false, 'No camera detected.');
                this.STATUS.startOFF();
                this.STATUS.loadingOFF();
            }
        }).catch((error) => {
            AS_COMPLETE(as, false, error);
            this.STATUS.startOFF();
            this.STATUS.loadingOFF();
        });
    }
    /**
     * drawImage
     * @param element
     * @param callback
     */
    async drawImage(element, callback = () => { }) {
        // Get the canvas element by using the getElementById method.
        const canvas = this.canvas.nativeElement;
        // Get a 2D drawing context for the canvas.
        const ctx = canvas.getContext('2d', { willReadFrequently: true });
        // HTMLImageElement size
        if (element instanceof HTMLImageElement) {
            canvas.width = element.naturalWidth;
            canvas.height = element.naturalHeight;
            element.style.visibility = '';
            this.video.nativeElement.style.visibility = 'hidden';
            // Image center and auto scale
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', canvas.width + 'px');
            this.renderer.setStyle(this.elementRef.nativeElement, 'maxWidth', 100 + '%');
            this.renderer.setStyle(this.elementRef.nativeElement, 'display', 'inline-block');
        }
        // HTMLVideoElement size
        if (element instanceof HTMLVideoElement) {
            canvas.width = element.videoWidth;
            canvas.height = element.videoHeight;
            element.style.visibility = '';
            this.canvas.nativeElement.style.visibility = 'hidden';
        }
        // Set width, height for video element
        UPDATE_WIDTH_HEIGHT_VIDEO(this.video.nativeElement, canvas);
        // clear frame
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        // Draw image
        ctx.drawImage(element, 0, 0, canvas.width, canvas.height);
        // Data image
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        // Draw frame
        const code = await zbarWasm.scanImageData(imageData);
        if (code?.length) {
            // Decode
            code.forEach((s) => s.value = s.decode(this.decode?.toLocaleLowerCase()));
            // Overlay
            DRAW_RESULT_APPEND_CHILD(code, Object.freeze(this.canvas.nativeElement), this.resultsPanel.nativeElement, this.canvasStyles);
            // To blob and emit data
            const EMIT_DATA = () => {
                this.eventEmit(code);
                this.dataForResize = code;
            };
            // HTMLImageElement
            if (element instanceof HTMLImageElement) {
                callback(true);
                EMIT_DATA();
                VIBRATE(this.vibrate);
                PLAY_AUDIO(this.isBeep);
            }
            // HTMLVideoElement
            if (element instanceof HTMLVideoElement) {
                EMIT_DATA();
                VIBRATE(this.vibrate);
                PLAY_AUDIO(this.isBeep);
            }
        }
        else {
            callback(false);
            REMOVE_RESULT_PANEL(this.resultsPanel.nativeElement);
            this.dataForResize = [];
        }
    }
    /**
     * eventEmit
     * @param response
     */
    eventEmit(response = false) {
        (response !== false) && this.data.next(response || []);
        (response !== false) && this.event.emit(response || []);
    }
    /**
     * Single-thread
     * Loop Recording on Camera
     * Must be destroy request
     * Not using: requestAnimationFrame
     * @param delay
     */
    requestAnimationFrame(delay = 100) {
        try {
            clearTimeout(this.rAF_ID);
            this.rAF_ID = setTimeout(() => {
                if (this.video.nativeElement.readyState === this.video.nativeElement.HAVE_ENOUGH_DATA) {
                    delay = 0; // Appy first request
                    WASM_READY() && this.drawImage(this.video.nativeElement);
                    this.isStart && !this.isPause && this.requestAnimationFrame(delay);
                }
            }, /*avoid cache mediaStream*/ delay || this.fps);
        }
        catch (error) {
            clearTimeout(this.rAF_ID);
        }
    }
    /**
     * isReady
     */
    get isReady() {
        return this.ready;
    }
    ngOnDestroy() {
        this.pause();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: NgxScannerQrcodeComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.3", type: NgxScannerQrcodeComponent, selector: "ngx-scanner-qrcode", inputs: { src: "src", fps: "fps", vibrate: "vibrate", decode: "decode", isBeep: "isBeep", config: "config", constraints: "constraints", canvasStyles: "canvasStyles" }, outputs: { event: "event" }, host: { classAttribute: "ngx-scanner-qrcode" }, viewQueries: [{ propertyName: "video", first: true, predicate: ["video"], descendants: true }, { propertyName: "canvas", first: true, predicate: ["canvas"], descendants: true }, { propertyName: "resultsPanel", first: true, predicate: ["resultsPanel"], descendants: true }], exportAs: ["scanner"], ngImport: i0, template: `<div #resultsPanel class="origin-overlay"></div><canvas #canvas class="origin-canvas"></canvas><video #video playsinline class="origin-video"></video>`, isInline: true, styles: [".ngx-scanner-qrcode{display:block;position:relative}.origin-overlay{width:100%;position:absolute}.origin-overlay span{z-index:2;text-align:left;position:absolute}.origin-overlay .qrcode-polygon{z-index:1;position:absolute}.origin-canvas{width:100%;position:absolute}.origin-video{width:100%;background-color:#262626}.qrcode-tooltip{z-index:3;position:absolute}.qrcode-tooltip:hover .qrcode-tooltip-temp{display:block;position:absolute;cursor:copy}.qrcode-tooltip:hover .qrcode-tooltip-temp:active{color:#afafaf}.qrcode-tooltip .qrcode-tooltip-temp{bottom:0;left:50%;color:#fff;text-align:left;display:none;width:max-content;word-wrap:break-word;transform:translate(-50%);transform-style:preserve-3d;background-color:#000000d0;box-shadow:1px 1px 20px #000000e0}.qrcode-tooltip .qrcode-tooltip-temp svg{cursor:pointer}.qrcode-tooltip .qrcode-tooltip-temp svg rect{fill:none;stroke:#fff;stroke-linejoin:round;stroke-width:32px}.qrcode-tooltip .qrcode-tooltip-temp svg path{fill:none;stroke:#fff;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px}.qrcode-tooltip .qrcode-tooltip-temp svg:active rect{stroke:#afafaf}.qrcode-tooltip .qrcode-tooltip-temp svg:active path{stroke:#afafaf}\n"], encapsulation: i0.ViewEncapsulation.None }); }
}
export { NgxScannerQrcodeComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: NgxScannerQrcodeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-scanner-qrcode', template: `<div #resultsPanel class="origin-overlay"></div><canvas #canvas class="origin-canvas"></canvas><video #video playsinline class="origin-video"></video>`, host: { 'class': 'ngx-scanner-qrcode' }, exportAs: 'scanner', inputs: ['src', 'fps', 'vibrate', 'decode', 'isBeep', 'config', 'constraints', 'canvasStyles'], outputs: ['event'], queries: {
                        video: new ViewChild('video'),
                        canvas: new ViewChild('canvas'),
                        resultsPanel: new ViewChild('resultsPanel')
                    }, encapsulation: ViewEncapsulation.None, styles: [".ngx-scanner-qrcode{display:block;position:relative}.origin-overlay{width:100%;position:absolute}.origin-overlay span{z-index:2;text-align:left;position:absolute}.origin-overlay .qrcode-polygon{z-index:1;position:absolute}.origin-canvas{width:100%;position:absolute}.origin-video{width:100%;background-color:#262626}.qrcode-tooltip{z-index:3;position:absolute}.qrcode-tooltip:hover .qrcode-tooltip-temp{display:block;position:absolute;cursor:copy}.qrcode-tooltip:hover .qrcode-tooltip-temp:active{color:#afafaf}.qrcode-tooltip .qrcode-tooltip-temp{bottom:0;left:50%;color:#fff;text-align:left;display:none;width:max-content;word-wrap:break-word;transform:translate(-50%);transform-style:preserve-3d;background-color:#000000d0;box-shadow:1px 1px 20px #000000e0}.qrcode-tooltip .qrcode-tooltip-temp svg{cursor:pointer}.qrcode-tooltip .qrcode-tooltip-temp svg rect{fill:none;stroke:#fff;stroke-linejoin:round;stroke-width:32px}.qrcode-tooltip .qrcode-tooltip-temp svg path{fill:none;stroke:#fff;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px}.qrcode-tooltip .qrcode-tooltip-temp svg:active rect{stroke:#afafaf}.qrcode-tooltip .qrcode-tooltip-temp svg:active path{stroke:#afafaf}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; } });
//# sourceMappingURL=data:application/json;base64,